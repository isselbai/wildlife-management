#!/bin/bash

# Exit on error and enable debug output
set -e
set -x

# Function to log with timestamps
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check Python version compatibility
check_python_version() {
    local py_version=$(python -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
    log "Detected Python version: $py_version"
    
    if [[ "$py_version" > "3.12" ]]; then
        log "WARNING: Python version $py_version may have compatibility issues with some packages"
        log "Recommended version is Python 3.11.x as specified in render.yaml"
    fi
}

log "=== Starting build process ==="

# Ensure we're in the correct directory
cd "${BASH_SOURCE%/*}" || exit 1
log "Working directory: $(pwd)"
check_python_version

# Remove any existing .env.render to ensure clean state
rm -f .env.render

# Only run apt-get if we're on Render (checking for specific environment variable)
if [ -z "$SKIP_APT" ]; then
    log "=== Installing system dependencies ==="
    apt-get update
    apt-get install -y $(cat apt-packages.txt)
else
    log "Skipping system dependencies (local development)"
fi

log "=== Installing Python dependencies ==="
python -m pip install --upgrade pip setuptools wheel

# Try to install psycopg2-binary, fall back to psycopg2 if it fails
if ! pip install psycopg2-binary; then
    log "WARNING: Failed to install psycopg2-binary, attempting to install psycopg2 instead..."
    pip install psycopg2
fi

# Install remaining requirements
pip install -r requirements.txt

log "=== Setting up project structure ==="
mkdir -p static media
mkdir -p staticfiles && chmod 755 staticfiles

# Create necessary directories
mkdir -p static media staticfiles
chmod 755 static media staticfiles

# Set environment variables based on environment
if [ -z "$SKIP_APT" ]; then
    # Render environment
    export PROJECT_ROOT="/opt/render/project/src"
else
    # Local environment
    export PROJECT_ROOT="$(pwd)"
fi

export PYTHONPATH="${PROJECT_ROOT}:${PROJECT_ROOT}/wildlife_management:${PYTHONPATH:-}"
export DJANGO_SETTINGS_MODULE="wildlife_management.settings"
export WSGI_APP="wildlife_management.wsgi:application"

log "=== Environment Variables ==="
log "PROJECT_ROOT: $PROJECT_ROOT"
log "PYTHONPATH: $PYTHONPATH"
log "DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE"
log "WSGI_APP: $WSGI_APP"

log "=== Running Django commands ==="
python manage.py check --deploy
python manage.py collectstatic --noinput --clear
python manage.py migrate --noinput

log "=== Creating .env.render ==="
cat > .env.render << EOL
#!/bin/bash
# Wildlife Management deployment environment configuration
# Generated by build.sh on $(date)

# Core paths and settings
export PROJECT_ROOT="${PROJECT_ROOT}"
export PYTHONPATH="${PROJECT_ROOT}:${PROJECT_ROOT}/wildlife_management:${PYTHONPATH:-}"
export WSGI_APP="wildlife_management.wsgi:application"
export DJANGO_SETTINGS_MODULE="wildlife_management.settings"

# Verify environment after sourcing
echo "=== Environment Verification ==="
echo "PROJECT_ROOT: \$PROJECT_ROOT"
echo "PYTHONPATH: \$PYTHONPATH"
echo "WSGI_APP: \$WSGI_APP"
echo "DJANGO_SETTINGS_MODULE: \$DJANGO_SETTINGS_MODULE"
EOL

chmod +x .env.render

log "=== Verifying .env.render ==="
cat .env.render
source .env.render

log "=== Testing Gunicorn ==="
if ! command -v gunicorn &> /dev/null; then
    log "WARNING: gunicorn not installed, installing now..."
    pip install gunicorn
fi

gunicorn --version

log "=== Running deployment checks ==="
python manage.py check --deploy

log "=== Build completed successfully ===" 